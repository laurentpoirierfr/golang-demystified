<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on Golang Demystified</title>
    <link>https://laurentpoirierfr.github.io/golang-demystified/docs/</link>
    <description>Recent content in Overview on Golang Demystified</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language><atom:link href="https://laurentpoirierfr.github.io/golang-demystified/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/000_intro/000_introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/000_intro/000_introduction/</guid>
      <description>Introduction Démystifier Go : Exploration de l&amp;rsquo;Écosystème d&amp;rsquo;un Langage de Programmation Révolutionnaire Dans le paysage des langages de programmation, émergent parfois des solutions qui résonnent avec la communauté des développeurs d&amp;rsquo;une manière unique. Go, souvent désigné sous le nom de Golang, est l&amp;rsquo;un de ces langages. Conçu par Google, Go a rapidement gagné en popularité pour sa simplicité, ses performances élevées et sa robustesse. Cependant, au-delà de ces caractéristiques techniques, Go possède un écosystème dynamique et en constante évolution qui mérite d&amp;rsquo;être exploré et compris.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/010_install/010_installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/010_install/010_installation/</guid>
      <description>Installation Téléchargement de Go : Rendez-vous sur le site officiel de Go à l&amp;rsquo;adresse https://golang.org/dl/. Téléchargez la version appropriée pour votre système d&amp;rsquo;exploitation (Linux, macOS, Windows, etc.). Une fois le téléchargement terminé, extrayez l&amp;rsquo;archive dans le répertoire $HOME/Community/go. Configuration des variables d&amp;rsquo;environnement : Ouvrez ou créez le fichier de profil de votre shell (~/.bash_profile, ~/.bashrc, ~/.zshrc, etc.). Ajoutez les lignes suivantes pour définir les variables d&amp;rsquo;environnement GOROOT, GOPATH, et mettre les binaires de GOPATH/bin dans le PATH : export GOROOT=$HOME/Community/go export GOPATH=$HOME/Community/gopath export PATH=$PATH:$GOROOT/bin:$GOPATH/bin Vérification de l&amp;rsquo;installation : Ouvrez un nouveau terminal.</description>
    </item>
    
    <item>
      <title>Exploration</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/020_explore/020_exploration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/020_explore/020_exploration/</guid>
      <description>Exploration $GOROOT Voici une explication rapide des répertoires principaux présents dans $GOROOT, qui est le répertoire où est installé Go :
bin/ : Ce répertoire contient les exécutables binaires de Go, y compris le binaire de l&amp;rsquo;interpréteur Go (go) et d&amp;rsquo;autres outils comme le formateur de code (gofmt), l&amp;rsquo;outil de gestion de modules (go mod), etc.
pkg/ : Ce répertoire contient les packages précompilés, c&amp;rsquo;est-à-dire les fichiers objets résultant de la compilation des fichiers source Go.</description>
    </item>
    
    <item>
      <title>Commandes</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/030_commandes/030_commandes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/030_commandes/030_commandes/</guid>
      <description>Commandes Voici une explication rapide des commandes les plus couramment utilisées avec Go :
go mod init : Initialise un nouveau module Go dans le répertoire courant. Un module est une collection de packages Go qui sont gérés ensemble, généralement stockés dans un référentiel versionné. Supposons que vous souhaitez créer un nouveau module Go pour un projet appelé &amp;ldquo;monprojet&amp;rdquo;. Vous pouvez utiliser go mod init pour initialiser un nouveau module dans le répertoire de votre projet.</description>
    </item>
    
    <item>
      <title>Language</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/040_language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/040_language/</guid>
      <description>Language Instructions de contrôle if if - Conditionnel de base L&amp;rsquo;instruction if en Go est utilisée pour exécuter un bloc de code si une condition est vraie. Elle peut être accompagnée d&amp;rsquo;un else ou de plusieurs else if pour gérer des cas supplémentaires.
Syntaxe de base if condition { // bloc de code si la condition est vraie } else if autreCondition { // bloc de code si l&amp;#39;autre condition est vraie } else { // bloc de code si aucune des conditions précédentes n&amp;#39;est vraie } Exemple package main import &amp;#34;fmt&amp;#34; func main() { a := 10 b := 20 if a &amp;gt; b { fmt.</description>
    </item>
    
    <item>
      <title>Opérateurs</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/041_operateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/041_operateurs/</guid>
      <description>Les opérateurs Voici la liste des principaux opérateurs en Go, avec des explications et des exemples pour chacun :
Opérateurs arithmétiques Addition (+) Ajoute deux valeurs. Exemple : package main import &amp;#34;fmt&amp;#34; func main() { a := 10 b := 5 result := a + b fmt.Println(&amp;#34;Addition :&amp;#34;, result) // Affiche: Addition : 15 } Soustraction (-) Soustrait une valeur d&amp;rsquo;une autre. Exemple: package main import &amp;#34;fmt&amp;#34; func main() { a := 10 b := 5 result := a - b fmt.</description>
    </item>
    
    <item>
      <title>Type Interface</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/042_interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/042_interface/</guid>
      <description>Type interface En Go, une interface est un type qui spécifie un ensemble de méthodes que d&amp;rsquo;autres types doivent implémenter. Les interfaces sont utilisées pour définir le comportement attendu sans spécifier l&amp;rsquo;implémentation concrète. Un type qui implémente toutes les méthodes d&amp;rsquo;une interface est considéré comme une instance de cette interface.
Définition d&amp;rsquo;une interface Une interface est définie en listant les méthodes qu&amp;rsquo;elle contient. Voici un exemple d&amp;rsquo;interface simple :
type Speaker interface { Speak() string } Implémentation de l&amp;rsquo;interface Un type implémente une interface en définissant toutes les méthodes de cette interface.</description>
    </item>
    
    <item>
      <title>Type Structure</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/043_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/040_language/043_structure/</guid>
      <description>Type structure En Go, une structure (ou struct) est un type de données composite qui regroupe des champs sous un même nom. Une structure permet de définir des objets avec des propriétés et des méthodes associées.
Définition d&amp;rsquo;une structure Une structure est définie en listant ses champs et leurs types. Voici un exemple simple :
type Person struct { Name string Age int } var john Person Instanciation via une fabrique Une fabrique (factory) est une fonction qui retourne une instance de la structure.</description>
    </item>
    
    <item>
      <title>Organisation packages standard</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/050_packages/050_packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/050_packages/050_packages/</guid>
      <description>Packages Exemple de structure du projet myproject/ ├── cmd/ │ └── myproject/ │ └── main.go ├── internal/ │ └── myproject/ │ ├── service/ │ │ └── service.go │ └── repository/ │ └── repository.go ├── pkg/ │ └── myproject/ │ ├── models/ │ │ └── models.go │ └── utils/ │ └── utils.go └── go.mod Description des packages cmd :
Ce répertoire contient les programmes exécutables de votre projet. Chaque sous-répertoire dans cmd contient un point d&amp;rsquo;entrée principal (main.</description>
    </item>
    
    <item>
      <title>Organisation packages web</title>
      <link>https://laurentpoirierfr.github.io/golang-demystified/docs/050_packages/051_packages_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laurentpoirierfr.github.io/golang-demystified/docs/050_packages/051_packages_web/</guid>
      <description>Exemple d&amp;rsquo;organisation pour un projet web Voici une structure et un exemple de code pour un projet Go utilisant le framework web Gin. Cette organisation inclut des packages pour les API, les services, les dépôts de données, et les connecteurs de données.
Structure du projet myproject/ ├── cmd/ │ └── myproject/ │ └── main.go ├── internal/ │ └── myproject/ │ ├── api/ │ │ ├── handlers/ │ │ │ └── user_handler.</description>
    </item>
    
  </channel>
</rss>
